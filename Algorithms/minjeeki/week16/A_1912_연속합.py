n = int(input())
numlst = list(map(int, input().split()))

dp = [0] * n

dp[0] = numlst[0]
max_sum = dp[0]

for i in range(1, n):
    # dp에 저장되는 값은 0부터 i까지 누적합을 구할 때 최댓값
    # 다음 dp를 구할때 이전값이 더할지, 아니면 새로 시작할지만 비교하면 됨
    dp[i] = max(numlst[i], dp[i - 1] + numlst[i])
    max_sum = max(max_sum, dp[i])

print(max_sum)

''' 예시를 통해 이해하기
numlst = [10, -4, 3, 1, 5, 6, -35, 12, 21, -1] 일 때 최댓값만 갱신하지 않고
현 위치까지 누적합이 가질 수 있는 모든 값을 계산해보면
dp = [(10), (6, -4), (9, -1, 3), (10, 0, 4, 1), (15, 5, 9, 5), ...]와 같이 된다.
가장 마지막 값은 numlst[i] 자기 자신이고, 그 앞의 값들은 시작점 인덱스를 +1한 값이다.
결론적으로 가장 마지막 값을 제외한 값들 중 최댓값이 이전 인덱스의 dp 값에 저장된다는 것이다.
'''